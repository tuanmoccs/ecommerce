$.ajaxSetup({
    headers: {
        'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
    }
});
function removeRow(id,url){
    if(confirm('B·∫°n c√≥ ch·∫Øc xo√° m·ª•c n√†y kh√¥ng?')){
        $.ajax({
            type: 'DELETE',
            url: url,
            data: {
                id: id,
                _token: $('meta[name="csrf-token"]').attr('content') // L·∫•y CSRF token t·ª´ meta
            },
            dataType: 'json', // ƒê√∫ng c√∫ ph√°p l√† `dataType`
            success: function(result) {
                if (result.error === false) { // `false` ch·ª© kh√¥ng ph·∫£i `flase`
                    alert(result.message);
                    location.reload();
                } else {
                    alert('Vui l√≤ng th·ª≠ l·∫°i');
                }
            },
            error: function(xhr) {
                alert("L·ªói: " + xhr.responseText);
            }
        });
    }
}

//Upload
$('#upload').change(function () {
    let form = new FormData();
    let files = $(this)[0].files;

    if (files.length === 0) {
        alert('Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt ·∫£nh.');
        return;
    }

    for (let i = 0; i < files.length; i++) {
        form.append('file[]', files[i]);
    }
    console.log("üìå D·ªØ li·ªáu g·ª≠i ƒëi:", form.getAll('file[]'));
    $.ajax({
        url: '/admin/upload/services',
        type: 'POST',
        headers: {
            'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
        },
        processData: false,
        contentType: false,
        dataType: 'json',
        data: form,
        success: function (results) {
            console.log('Response t·ª´ server:', results);

            // Ki·ªÉm tra l·ªói tr∆∞·ªõc khi x·ª≠ l√Ω ·∫£nh
            if (results.error) {
                console.error('L·ªói upload:', results.message);
                alert('Upload th·∫•t b·∫°i: ' + results.message);
                return;
            }

            let urls = results.urls || results.url?.original?.urls;

            if (!Array.isArray(urls)) {
                console.error('L·ªói: urls kh√¥ng ph·∫£i l√† m·∫£ng h·ª£p l·ªá!', urls);
                return;
            }

            let html = '';
            urls.forEach(url => {
                console.log('Image URL:', url);
                html += `<a href="${url}" target="_blank">
                    <img src="${url}" width="100px" height="100px" style="margin:5px;">
                 </a>`;
            });

            $('#image_show').html(html);
            $('#thumb').val(urls.join(',')); // L∆∞u danh s√°ch ·∫£nh v√†o input ·∫©n
        },
        error: function (xhr, status, error) {
            console.error(xhr.responseText);
            alert('C√≥ l·ªói x·∫£y ra, ki·ªÉm tra console!');
        }
    });
});

